;   Copyright (c) Rich Hickey and contributors.
;   All rights reserved.
;   The use and distribution terms for this software are covered by the
;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;   which can be found in the file epl-v10.html at the root of this distribution.
;   By using this software in any fashion, you are agreeing to be bound by
;   the terms of this license.
;   You must not remove this notice, or any other, from this software.
;
;   Alioth benchmarks:
;   http://shootout.alioth.debian.org/u64q/benchmark.php?test=regexdna

(ns alioth.regexme
  (:require [clojure.java.io :as io]
            [clojure.string :as str])
  (:import [java.util.regex Pattern])
  (:gen-class))

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

(def ^:const replacements
  {"B" "(c|g|t)"
   "D" "(a|g|t)"
   "H" "(a|c|t)"
   "K" "(g|t)"
   "M" "(a|c)"
   "N" "(a|c|g|t)"
   "R" "(a|g)"
   "S", "(c|g)"
   "V", "(a|c|g)"
   "W", "(a|t)"
   "Y", "(c|t)"})

(def ^:const variants
  ["agggtaaa|tttaccct"
   "[cgt]gggtaaa|tttaccc[acg]"
   "a[act]ggtaaa|tttacc[agt]t"
   "ag[act]gtaaa|tttac[agt]ct"
   "agg[act]taaa|ttta[agt]cct"
   "aggg[acg]aaa|ttt[cgt]ccct"
   "agggt[cgt]aa|tt[acg]accct"
   "agggta[cgt]a|t[acg]taccct"
   "agggtaa[cgt]|[acg]ttaccct"])

(def ^:const replace-pattern #"[BDHKMNRSVWY]")

(defn count-occurences [content results regex]
  (let [matcher (.matcher (Pattern/compile regex) content)]
    (loop [count (long 0)]
      (if (.find matcher)
        (recur (inc count))
        (swap! results assoc regex count)))))

(defn apply-regex [content]
  (let [results (atom {})
        ^Runnable count-variant (partial count-occurences content results)
        threads (doall (map #(doto (Thread. (fn [] (count-variant %))) (.start))
                            variants))]
    (doall (map #(.join ^Thread %) threads))
    @results))

(defn replace-codes ^CharSequence [^String content]
  (let [buf (StringBuffer.)
        m (.matcher replace-pattern content)]
    (loop []
      (when (.find m)
        (.appendReplacement m buf "")
        (.append buf (get replacements (.group m)))
        (recur)))
    (.appendTail m buf)
    buf))

(defn -main [& args]
  (let [r (io/reader System/in :encoding "US-ASCII")
        init (slurp r)
        content (.replaceAll init ">.*\n|\n" "")
;;        content (str/replace init  "")
        results (apply-regex content)
        buf (replace-codes content)]

    (doseq [variant variants] (println variant (get results variant)))
    (println)
    (println (count init))
    (println (count content))
    (println (count buf))))
