;;   The Computer Language Benchmarks Game
;;   http://benchmarksgame.alioth.debian.org/

;; contributed by Bill James
;; speed improvements by Andy Fingerhut
;; ported to Clojure 1.3 by Marko Kocic
;; updated for Clojure 1.5 by Alex Miller
;;  removed most casts and ints, add *unchecked-math*
;; updated by Alex Miller
;;  changed seed gen to use deftype instead of mutable array

(ns alioth.fasta-redux
  (:gen-class))

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

(def ^:const IM 139968)
(def ^:const IA 3877)
(def ^:const IC 29573)

(def ^:const LINE_LENGTH 60)
(def ^:const LINES_IN_BUFFER 2000)
(def ^:const LOOKUP_SIZE 222000)
(def ^:const LOOKUP_SCALE (- LOOKUP_SIZE 0.0001))
(def ^:const LCG_SCALE (/ (double LOOKUP_SIZE) IM))

(def alu (str "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG"
              "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA"
              "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT"
              "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA"
              "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG"
              "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC"
              "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA"))

(def codes "acgtBDHKMNRSVWY")

(def iub [0.27 0.12 0.12 0.27 0.02 0.02 0.02 0.02
          0.02 0.02 0.02 0.02 0.02 0.02 0.02])

(def homosapiens [0.3029549426680 0.1979883004921
                  0.1975473066391 0.3015094502008])

(defn find-index ^long [^double t ^doubles coll]
  (loop [i 0]
    (if (<= t (aget coll i))
      i
      (recur (inc i)))))

(definterface Seed
  (^long nextSeed []))

(deftype RandomSeed [^:unsynchronized-mutable ^long seed]
  Seed
  (nextSeed [_]
    (let [new-seed (rem (+ (* seed IA) IC) IM)]
      (set! seed new-seed)
      (long (* new-seed LCG_SCALE)))))

(def ^Seed random-seed (->RandomSeed 42))

;; Takes a vector of probabilities.
(defn make-cumulative
  ^doubles [v]
  (double-array (map #(reduce + (subvec v 0 %)) (range 1 (inc (count v))))))

;; Takes a double array of cumulative probabilities.
(defn make-lookup-table [^doubles v]
  (let [^longs a (long-array LOOKUP_SIZE)]
    (loop [i 0]
      (if (< i LOOKUP_SIZE)
        (let [t (/ i LOOKUP_SCALE)]
          (aset a i (find-index t v))
          (recur (inc i)))
        a))))

(defn fasta-repeat [^long n ^java.io.BufferedOutputStream ostream]
  (let [^bytes source (.getBytes (str alu alu))
        source-size (count alu)
        width+1 (inc LINE_LENGTH)
        buffer-size (* width+1 4096)
        buffer (byte-array buffer-size (byte 10))]
    (loop [i 0
           j 0
           n n]
      (System/arraycopy source i buffer j LINE_LENGTH)
      (if (> n LINE_LENGTH)
        (recur (long (rem (+ i LINE_LENGTH) source-size))
               (let [j (+ j width+1)]
                 (if (= j buffer-size)
                   (do (.write ostream buffer)
                       0)
                   j))
               (- n LINE_LENGTH))
        (do
          (aset buffer (+ j n) (byte 10))
          (.write ostream buffer 0 (+ j n 1)))))))

(defn fasta-random [probs ^long n ^java.io.BufferedOutputStream ostream]
  (let [codes (.getBytes (str codes))
        lookup-table (longs (make-lookup-table
                             (make-cumulative probs)))
        width-1 (dec LINE_LENGTH)
        buf-size (* LINES_IN_BUFFER (inc LINE_LENGTH))
        buffer (byte-array buf-size)
        b10 (byte 10)]
    (loop [n n        ;; The number of characters left to generate.
           j LINE_LENGTH  ;; The number of characters left to
                          ;; generate on the current line of output
                          ;; before printing a newline.
           i 0] ;; Number of characters put in buffer so far.
      (if (zero? n)
        (do
          (.write ostream buffer 0 i)
          (when (not= b10 (aget buffer (dec i)))
            (aset buffer 0 b10)
            (.write ostream buffer 0 1)))
        ;; else
        (let [rand-byte (aget codes (aget lookup-table (.nextSeed random-seed)))]
          (if (= i buf-size)
            (do
              ;; buffer is full.  write it and start over.
              (.write ostream buffer 0 buf-size)
              (aset buffer 0 rand-byte)
              (recur (dec n) width-1 1))
            (do
              (aset buffer i rand-byte)
              (if (= j 1)
                ;; then
                (do
                  (aset buffer (inc i) b10) ;; add newline
                  (recur (dec n) LINE_LENGTH (+ i 2)))
                ;; else
                (recur (dec n) (dec j) (inc i))))))))))

(defn write-line [s ^java.io.BufferedOutputStream stream]
  (.write stream (.getBytes (str s "\n"))))

(defn -main [& args]
  (let [n (read-string (first args))
        ostream (java.io.BufferedOutputStream. System/out)]
    (write-line ">ONE Homo sapiens alu" ostream)
    (fasta-repeat (* n 2) ostream)
    (write-line ">TWO IUB ambiguity codes" ostream)
    (fasta-random iub (* n 3) ostream)
    (write-line ">THREE Homo sapiens frequency" ostream)
    (fasta-random homosapiens (* n 5) ostream)
    (.flush ostream)))
