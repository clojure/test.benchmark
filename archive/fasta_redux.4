;   Copyright (c) Rich Hickey and contributors.
;   All rights reserved.
;   The use and distribution terms for this software are covered by the
;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;   which can be found in the file epl-v10.html at the root of this distribution.
;   By using this software in any fashion, you are agreeing to be bound by
;   the terms of this license.
;   You must not remove this notice, or any other, from this software.

;   Alioth benchmarks: http://shootout.alioth.debian.org/u64q/benchmark.php?test=fasta

(ns alioth.fasta-redux
  (:gen-class)
  (:import [java.io OutputStream]))

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

(def ^:const LINE_LENGTH 60)
(def ^:const OUT_BUFFER_SIZE (* 256 1024))
(def ^:const LOOKUP_SIZE (* 4 1024))
(def ^:const LOOKUP_SCALE (double (dec LOOKUP_SIZE)))
(def ^:const LCG_M 139968)
(def ^:const LCG_A 3877)
(def ^:const LCG_C 29573)
(def ^:const LCG_SCALE (/ LOOKUP_SCALE LCG_M))

(deftype Freq [^byte c ^double p])

(defmacro lcg-next
  "Return the next scaled random value, using long array a to hold seed/state."
  [a]
  `(let [~'n (rem (+ (* (aget ~(with-meta a {:tag 'longs}) 0) LCG_A) LCG_C) LCG_M)]
     (aset ~(with-meta a {:tag 'longs}) 0 ~'n)
     (* LCG_SCALE ~'n)))

(def alu (-> (str "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG"
                  "GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA"
                  "CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT"
                  "ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA"
                  "GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG"
                  "AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC"
                  "AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA") (.getBytes)))

(def iub-prob
  [[\a 0.27] [\c 0.12] [\g 0.12] [\t 0.27] [\B 0.02] [\D 0.02] [\H 0.02] [\K 0.02]
   [\M 0.02] [\N 0.02] [\R 0.02] [\S 0.02] [\V 0.02] [\W 0.02] [\Y 0.02]])

(def homo-sapiens-prob
  [[\a 0.3029549426680] [\c 0.1979883004921] [\g 0.1975473066391] [\t 0.3015094502008]])

(defn sum-and-scale
  "Given a map of element to probability and a scale, produce
   a vector of Freq containing scaled cumulative probabilities"
  [prob scale]
  (loop [p 0.0
         freqs []
         [[e prob] & more] prob]
    (if e
      (let [p (+ p prob)]
        (recur p (conj freqs (Freq. (byte (int e)) (* p scale))) more))
      (update-in freqs [(dec (count freqs))] #(Freq. (.c ^Freq %) scale)))))

;; approach to proportionality matches algorithm in Java version
(defn lookup
  "Produce a lookup table (an array of size scale + 1) where each
   item in cprob table appears a proportionate number of times."
  ^"[Ljava.lang.Object;" [cprob scale]
  (let [size (+ scale 1)
        table (object-array size)]
    (loop [i 0 j 0]
      (when (< i size)
        (let [j (long (loop [j j]
                        (if (< (.p ^Freq (cprob j)) i)
                          (recur (inc j))
                          j)))]
          (aset table i (cprob j))
          (recur (inc i) j))))
    table))

(defn cycle-byte-array
  "Create a byte array of size size, cycling over the values
   in byte array bbuf."
  ^"[B" [bbuf size]
  (byte-array (take size (cycle bbuf))))

(defn check-flush
  ^long [^bytes buf ^long ct]
  (if (> ct (- (alength buf) LINE_LENGTH 1))
    (do
      ;;(.write System/out buf 0 ct)
      0)
    ct))

(def ^OutputStream fout (java.io.BufferedOutputStream. (System/out) (* 256 1024)))
        
(defn repeat-fasta
  [desc ^bytes alu ^long n ^long line]
  (println desc)
  (let [buf (cycle-byte-array alu (+ (alength alu) line))]
    (loop [pos 0]
      (when (< pos n)
        (let [ct (min line (- n pos))]
          ;;(.write fout buf (rem pos (alength alu)) ct)
          ;;(.write fout 10)
          (recur (+ pos ct))))))
  (.flush fout))

(defn random-fasta
  [desc r freq lookup-scale n line]
  (println desc)
  (let [outbuf (byte-array (* 256 1024))
        lookup (-> (sum-and-scale freq lookup-scale)
                   (lookup lookup-scale))]
    (loop [n (long n)
           oc 0]
      (if (> n 0)
        (let [oc (check-flush outbuf oc)
              ct (long (min line n))]
          (recur (- n ct)
                 (long (loop [c oc]
                         (if (< c (+ oc ct))
                           (do
                             (aset outbuf c
                                   (.c ^Freq (aget lookup
                                                   (loop [nr (lcg-next r)
                                                          ai (long nr)]
                                                     (if (<  (.p ^Freq (aget lookup ai)) nr)
                                                       (recur nr (inc ai))
                                                       ai)))))
                             (recur (long (inc c))))
                           (do
                             (aset outbuf c (byte 10))
                             (long (inc c))))))))
        ;;(.write System/out outbuf 0 oc)
        ))))

(defn -main [a & args]
  (let [n (read-string a)
        r (long-array [42])]
    (repeat-fasta ">ONE Homo sapiens alu" alu (* 2 n)  LINE_LENGTH)
    (random-fasta ">TWO IUB ambiguity codes" r iub-prob LOOKUP_SCALE (* 3 n) LINE_LENGTH)
    (random-fasta ">THREE Homo sapiens frequency" r homo-sapiens-prob LOOKUP_SCALE (* 5 n) LINE_LENGTH)))
