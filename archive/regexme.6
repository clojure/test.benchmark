;   Copyright (c) Rich Hickey and contributors.
;   All rights reserved.
;   The use and distribution terms for this software are covered by the
;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;   which can be found in the file epl-v10.html at the root of this distribution.
;   By using this software in any fashion, you are agreeing to be bound by
;   the terms of this license.
;   You must not remove this notice, or any other, from this software.
;
;   Alioth benchmarks:
;   http://shootout.alioth.debian.org/u64q/benchmark.php?test=regexdna

(ns alioth.regexme
  (:import [java.io BufferedReader InputStreamReader])
  (:import [java.util.regex Pattern])
  (:gen-class))

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

(defn -main [& args]
  (let [replacements {"B" "(c|g|t)"
                      "D" "(a|g|t)"
                      "H" "(a|c|t)"
                      "K" "(g|t)"
                      "M" "(a|c)"
                      "N" "(a|c|g|t)"
                      "R" "(a|g)"
                      "S", "(c|g)"
                      "V", "(a|c|g)"
                      "W", "(a|t)"
                      "Y", "(c|t)"}
        r (BufferedReader. (InputStreamReader. (System/in) "US-ASCII"))
        sb (StringBuffer.)]
    (loop [line (.readLine r)]
      (when (not (nil? line))
        (.append sb line)
        (.append sb "\n")
        (recur (.readLine r))))
    (let [initialLength (.length sb)
          sequence (.replaceAll (.toString sb) ">.*\n|\n" "")
          codeLength (.length sequence)
          buflen (atom nil)
          buflen-thread (Thread. #(let [buf (StringBuffer.)
                                        m (.matcher (Pattern/compile "[WYKMSRBDVHN]") sequence)]
                                    (loop []
                                      (when (.find m)
                                        (.appendReplacement m buf "")
                                        (.append buf (.get replacements (.group m)))
                                        (recur)))
                                    (.appendTail m buf)
                                    (reset! buflen (.length buf))))

          variants ["agggtaaa|tttaccct", "[cgt]gggtaaa|tttaccc[acg]",
                    "a[act]ggtaaa|tttacc[agt]t", "ag[act]gtaaa|tttac[agt]ct",
                    "agg[act]taaa|ttta[agt]cct", "aggg[acg]aaa|ttt[cgt]ccct",
                    "agggt[cgt]aa|tt[acg]accct", "agggta[cgt]a|t[acg]taccct",
                    "agggtaa[cgt]|[acg]ttaccct"]
          tg (ThreadGroup. "regex")
          results (atom {})
          ]
      (.start buflen-thread)
      (doall
       (for [^String v variants]
         (.start
          (proxy [Thread] [tg v]
            (run []
              (let [m (.matcher (Pattern/compile v) sequence)]
                (loop [c 0]
                  (if (.find m)
                    (recur (inc c))
                    (swap! results assoc v c)))))))))
      (let [^"[Ljava.lang.Thread;" threads (make-array Thread (count variants))]
        (.enumerate tg threads)
        (doseq [^Thread t threads]
          (when (not (nil? t))
            (.join t))))
      (.destroy tg)
      (doall (for [variant variants]
               (println variant (get @results variant))))

      (println)
      (println initialLength)
      (println codeLength)
      (.join buflen-thread)
      (println @buflen))))
