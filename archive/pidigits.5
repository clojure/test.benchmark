;; The Computer Language Benchmarks Game
;; http://benchmarksgame.alioth.debian.org/
;; contributed by Mike Pall
;; java port by Stefan Krause
;; clojure port by Koji Yusa
;; this code uses jgmplib library
;; perf improvements by Alex Miller (fixing reflection and prims)

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

(ns pidigits
  (:gen-class)
  (:import (clojure.asm Opcodes Type Label ClassWriter)))

(definterface IGmpInteger
  (^long getPointer [])
  (^void set [^int value])
  (^void mul [^pidigits.IGmpInteger src ^int value])
  (^void add [^pidigits.IGmpInteger op1 ^pidigits.IGmpInteger op2])
  (^void div [^pidigits.IGmpInteger op1 ^pidigits.IGmpInteger op2])
  (^int intValue [])
  (^double doubleValue))

;; disassembled GmpInteger
(defn makeGmpInteger []
  (let [cw (ClassWriter. 0)]
    (.visit cw Opcodes/V1_7 (bit-or Opcodes/ACC_PUBLIC Opcodes/ACC_SUPER) "GmpInteger" nil "java/lang/Object" (into-array String ["pidigits/IGmpInteger"] ))
    (doto (.visitField cw Opcodes/ACC_PRIVATE "pointer" "J" nil nil)
      (.visitEnd))
    (let [l0 (Label.) l3 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC "<init>" "()V" nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitMethodInsn Opcodes/INVOKESPECIAL "java/lang/Object" "<init>" "()V")
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitMethodInsn Opcodes/INVOKESPECIAL "GmpInteger" "mpz_init" "()V")
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l3)
        (.visitLocalVariable "this" "LGmpInteger;" nil, l0 l3 0)
        (.visitMaxs 1 1)
        (.visitEnd)))
    (let [l0 (Label.) l3 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC "<init>" "(I)V" nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitMethodInsn Opcodes/INVOKESPECIAL "GmpInteger" "<init>" "()V")
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitFieldInsn Opcodes/GETFIELD "GmpInteger" "pointer" "J")
        (.visitVarInsn Opcodes/ILOAD 1)
        (.visitMethodInsn Opcodes/INVOKESTATIC "GmpInteger" "mpz_set_si" "(JI)V")
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l3)
        (.visitLocalVariable "this" "LGmpInteger;" nil l0 l3 0)
        (.visitLocalVariable "value"  "I" nil l0 l3 1)
        (.visitMaxs 3 2)
        (.visitEnd)))
    (let [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC "set" "(I)V" nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitFieldInsn Opcodes/GETFIELD "GmpInteger" "pointer" "J")
        (.visitVarInsn Opcodes/ILOAD 1)
        (.visitMethodInsn Opcodes/INVOKESTATIC "GmpInteger" "mpz_set_si" "(JI)V")
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l1)
        (.visitLocalVariable "this" "LGmpInteger;" nil l0 l1 0)
        (.visitLocalVariable "value" "I" nil l0 l1 1)
        (.visitMaxs 3 2)
        (.visitEnd)))
    (let [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC "mul" "(Lpidigits/IGmpInteger;I)V" nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitFieldInsn Opcodes/GETFIELD "GmpInteger" "pointer" "J")
        (.visitVarInsn Opcodes/ALOAD 1)
        (.visitMethodInsn Opcodes/INVOKEINTERFACE "pidigits/IGmpInteger" "getPointer" "()J")
        (.visitVarInsn Opcodes/ILOAD 2)
        (.visitMethodInsn Opcodes/INVOKESTATIC "GmpInteger" "mpz_mul_si" "(JJI)V")
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l1)
        (.visitLocalVariable "this" "LGmpInteger;" nil l0 l1 0)
        (.visitLocalVariable "src" "Lpidigits/IGmpInteger;" nil l0 l1 1)
        (.visitLocalVariable "val" "I" nil l0 l1 2)
        (.visitMaxs 5 3)
        (.visitEnd)))
    (let [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC "add" "(Lpidigits/IGmpInteger;Lpidigits/IGmpInteger;)V" nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitFieldInsn Opcodes/GETFIELD "GmpInteger" "pointer" "J")
        (.visitVarInsn Opcodes/ALOAD 1)
        (.visitMethodInsn Opcodes/INVOKEINTERFACE "pidigits/IGmpInteger" "getPointer" "()J")
        (.visitVarInsn Opcodes/ALOAD 2)
        (.visitMethodInsn Opcodes/INVOKEINTERFACE "pidigits/IGmpInteger" "getPointer" "()J")
        (.visitMethodInsn Opcodes/INVOKESTATIC "GmpInteger" "mpz_add" "(JJJ)V")
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l1)
        (.visitLocalVariable "this" "LGmpInteger;" nil l0 l1 0)
        (.visitLocalVariable "op1" "Lpidigits/IGmpInteger;" nil l0 l1 1)
        (.visitLocalVariable "op2" "Lpidigits/IGmpInteger;" nil l0 l1 2)
        (.visitMaxs 6 3)
        (.visitEnd)))
    (let [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC "div" "(Lpidigits/IGmpInteger;Lpidigits/IGmpInteger;)V" nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitFieldInsn Opcodes/GETFIELD "GmpInteger" "pointer" "J")
        (.visitVarInsn Opcodes/ALOAD 1)
        (.visitMethodInsn Opcodes/INVOKEINTERFACE "pidigits/IGmpInteger" "getPointer" "()J")
        (.visitVarInsn Opcodes/ALOAD 2)
        (.visitMethodInsn Opcodes/INVOKEINTERFACE "pidigits/IGmpInteger" "getPointer" "()J")
        (.visitMethodInsn Opcodes/INVOKESTATIC "GmpInteger" "mpz_tdiv_q" "(JJJ)V")
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l1)
        (.visitLocalVariable "this" "LGmpInteger;" nil l0 l1 0)
        (.visitLocalVariable "op1" "Lpidigits/IGmpInteger;" nil l0 l1 1)
        (.visitLocalVariable "op2" "Lpidigits/IGmpInteger;" nil l0 l1 2)
        (.visitMaxs 6 3)
        (.visitEnd)))
    (let [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC "intValue" "()I" nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitFieldInsn Opcodes/GETFIELD "GmpInteger" "pointer" "J")
        (.visitMethodInsn Opcodes/INVOKESTATIC "GmpInteger" "mpz_get_si" "(J)I")
        (.visitInsn Opcodes/IRETURN)
        (.visitLabel l1)
        (.visitLocalVariable "this" "LGmpInteger;" nil l0 l1 0)
        (.visitMaxs 2 1)
        (.visitEnd)))
    (let [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC "doubleValue" "()D" nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitFieldInsn Opcodes/GETFIELD "GmpInteger" "pointer" "J")
        (.visitMethodInsn Opcodes/INVOKESTATIC "GmpInteger" "mpz_get_d" "(J)D")
        (.visitInsn Opcodes/DRETURN)
        (.visitLabel l1)
        (.visitLocalVariable "this" "LGmpInteger;" nil l0 l1 0)
        (.visitMaxs 2 1)
        (.visitEnd)))
    (let [l0 (Label.) l2 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PROTECTED "finalize" "()V" nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitFieldInsn Opcodes/GETFIELD "GmpInteger" "pointer" "J")
        (.visitMethodInsn Opcodes/INVOKESPECIAL "GmpInteger" "mpz_clear" "(J)V")
        (.visitInsn Opcodes/RETURN)
        (.visitLabel l2)
        (.visitLocalVariable "this" "LGmpInteger;" nil l0 l2 0)
        (.visitMaxs 3 1)
        (.visitEnd)))
    (let [l0 (Label.) l2 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_PUBLIC "getPointer" "()J" nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitVarInsn Opcodes/ALOAD 0)
        (.visitFieldInsn Opcodes/GETFIELD "GmpInteger" "pointer" "J")
        (.visitInsn Opcodes/LRETURN)
        (.visitLabel l2)
        (.visitLocalVariable "this" "LGmpInteger;" nil l0 l2 0)
        (.visitMaxs 2 1)
        (.visitEnd)))  
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_NATIVE) "mpz_init" "()V" nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_NATIVE) "mpz_clear" "(J)V" nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) "mpz_mul_si" "(JJI)V" nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) "mpz_add" "(JJJ)V" nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) "mpz_tdiv_q" "(JJJ)V" nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) "mpz_set_si" "(JI)V" nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) "mpz_get_si" "(J)I" nil nil)
      (.visitEnd))
    (doto (.visitMethod cw (bit-or Opcodes/ACC_PRIVATE Opcodes/ACC_STATIC Opcodes/ACC_NATIVE) "mpz_get_d" "(J)D" nil nil)
      (.visitEnd))
    (let [l0 (Label.) l1 (Label.)]
      (doto (.visitMethod cw Opcodes/ACC_STATIC "<clinit>" "()V" nil nil)
        (.visitCode)
        (.visitLabel l0)
        (.visitLdcInsn "jgmplib")
        (.visitMethodInsn Opcodes/INVOKESTATIC "java/lang/System" "loadLibrary" "(Ljava/lang/String;)V")
        (.visitLabel l1)
        (.visitInsn Opcodes/RETURN)
        (.visitMaxs 1 0)
        (.visitEnd)))
    (.visitEnd cw)
    (.toByteArray cw)))

(let [ba ^bytes (makeGmpInteger)
      dcl (clojure.lang.DynamicClassLoader. (.getClassLoader pidigits.IGmpInteger))
      GmpInt ^Class (.defineClass dcl "GmpInteger" ba nil)]
  (try
  (def q (.newInstance GmpInt))
  (def r (.newInstance GmpInt))
  (def s (.newInstance GmpInt))
  (def t (.newInstance GmpInt))
  (def u (.newInstance GmpInt))
  (def v (.newInstance GmpInt))
  (def w (.newInstance GmpInt))
  (catch Throwable t nil)))

(def strbuf (StringBuilder. 20))

;; Extract one digit.
(defn ^long extract [^long j]
  (.mul ^pidigits.IGmpInteger u ^pidigits.IGmpInteger q j)
  (.add ^pidigits.IGmpInteger u ^pidigits.IGmpInteger u ^pidigits.IGmpInteger r)
  (.mul ^pidigits.IGmpInteger v ^pidigits.IGmpInteger s j)
  (.add ^pidigits.IGmpInteger v ^pidigits.IGmpInteger v ^pidigits.IGmpInteger t)
  (.div ^pidigits.IGmpInteger w ^pidigits.IGmpInteger u ^pidigits.IGmpInteger v)
  (.intValue ^pidigits.IGmpInteger w))

;; Print one digit. Returns 1 for the last digit.
(defn prdigit [^long y ^long i ^long n]
  (let [strbuf ^StringBuilder strbuf]
    (.append strbuf y)
    (when (or (= (mod i 10) 0) (= i n))
      (when (not= (mod i 10) 0)
        (.append strbuf (apply str (repeat (- 10 (mod i 10)) " "))))
      (.append strbuf "\t:")
      (.append strbuf i)
      (println (.toString strbuf))
      (.setLength strbuf 0))
    (= i n)))

;; Generate successive digits of PI.
(defn ^long digits [^long n]
  (do
    (.set ^pidigits.IGmpInteger q 1)
    (.set ^pidigits.IGmpInteger r 0)
    (.set ^pidigits.IGmpInteger s 0)
    (.set ^pidigits.IGmpInteger t 1)
    (.set ^pidigits.IGmpInteger u 0)
    (.set ^pidigits.IGmpInteger v 0)
    (.set ^pidigits.IGmpInteger w 0)
    (loop [k 1 i 1]
      (let [y (extract 3)]
        (if (= y (extract 4))
          (if (prdigit y i n)
            k
            (do 
              (.mul ^pidigits.IGmpInteger u ^pidigits.IGmpInteger r 0)
              (.mul ^pidigits.IGmpInteger r ^pidigits.IGmpInteger r 10)
              (.mul ^pidigits.IGmpInteger v ^pidigits.IGmpInteger t (* -10 y))
              (.add ^pidigits.IGmpInteger r ^pidigits.IGmpInteger r ^pidigits.IGmpInteger v)
              (.mul ^pidigits.IGmpInteger t ^pidigits.IGmpInteger t 1)
              (.add ^pidigits.IGmpInteger t ^pidigits.IGmpInteger t ^pidigits.IGmpInteger u)
              (.mul ^pidigits.IGmpInteger s ^pidigits.IGmpInteger s 1)
              (.mul ^pidigits.IGmpInteger u ^pidigits.IGmpInteger q 0)
              (.add ^pidigits.IGmpInteger s ^pidigits.IGmpInteger s ^pidigits.IGmpInteger u)
              (.mul ^pidigits.IGmpInteger q ^pidigits.IGmpInteger q 10)
              (recur k (inc i))))
          (let [br (+ (* 4 k) 2)
                bt (+ (* 2 k) 1)]
            (.mul ^pidigits.IGmpInteger r ^pidigits.IGmpInteger r bt)
            (.mul ^pidigits.IGmpInteger u ^pidigits.IGmpInteger q br)
            (.add ^pidigits.IGmpInteger r ^pidigits.IGmpInteger r ^pidigits.IGmpInteger u)
            (.mul ^pidigits.IGmpInteger u ^pidigits.IGmpInteger t 0)
            (.mul ^pidigits.IGmpInteger t ^pidigits.IGmpInteger t bt)
            (.mul ^pidigits.IGmpInteger v ^pidigits.IGmpInteger s br)
            (.add ^pidigits.IGmpInteger t ^pidigits.IGmpInteger t ^pidigits.IGmpInteger v)
            (.mul ^pidigits.IGmpInteger s ^pidigits.IGmpInteger s k)
            (.add ^pidigits.IGmpInteger s ^pidigits.IGmpInteger s ^pidigits.IGmpInteger u)
            (.mul ^pidigits.IGmpInteger q ^pidigits.IGmpInteger q k)
            (recur (inc k) i)))))))

(defn -main [& args]
  (let [n (long (try (Long/parseLong (first args))
                  (catch NumberFormatException e 27)))]
    (digits n))
  (flush))
