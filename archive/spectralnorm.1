;; The Computer Language Benchmarks Game
;; http://benchmarksgame.alioth.debian.org/
;;
;; contributed by Jim Kannampuzha
;; inspired by Jesse Rosenstock
;; modified by Andy Fingerhut (small bug where if input value n was
;;    not a multiple of the number of available processors, the
;;    program would hang.)
;; updated by Alex Miller for Clojure 1.6.0


(ns alioth.spectralnorm
  (:gen-class))

(set! *warn-on-reflection* true)
(set! *unchecked-math* true)

(defn a ^double [^long i ^long j]
  (/ 1.0 (+ (* (* (+ i j) (+ i j 1)) 2) (inc i))))

#_(defmacro eval-a [ii jj]
  `(let [i# (long ~ii)
         j# (long ~jj)
         n# (+ i# j#)
         n+1# (inc n#)]
     (/ (double 1.0)
        (+ (bit-shift-right (* n# n+1#) 1)
           (inc i#)))))

(defn multiply-a-v [agent ^doubles v ^doubles av range]
  (let [end (long (second range))]
    (loop [i (long (first range))]
      (if (= i end)
        nil
        (do
          (aset av i (double (areduce v j sum (double 0)
                                      (+ sum (* (a i j) (aget v j))))))
          (recur (unchecked-inc i)))))))

(defn multiply-at-v [agent ^doubles v ^doubles atv range]
  (let [end (long (second range))]
    (loop [i (long (first range))]
      (if (= i end)
        nil
        (do
          (aset atv i
                (double (areduce v j sum (double 0)
                                 (+ sum (* (a j i) (aget v j))))))
          (recur (unchecked-inc i)))))))

(defn multiply-at-a-v [^doubles v ^doubles tmp ^doubles at-av
                       num-threads workers ranges]
  (dotimes [i num-threads]
    (send (nth workers i) multiply-a-v v tmp (nth ranges i)))
  (apply await workers)
  (dotimes [i num-threads]
    (send (nth workers i) multiply-at-v tmp at-av (nth ranges i)))
  (apply await workers))

(defmacro dot-product [^doubles u ^doubles v]
  `(areduce ~u i# sum# (double 0) (+ sum# (* (aget ~u i#) (aget ~v i#)))))

(defn run-game [^long size]
  (let [num-threads (.availableProcessors (Runtime/getRuntime))
        workers (vec (repeatedly num-threads #(agent ())))
        chunk-size (long (Math/ceil (/ size num-threads)))
        ranges  (vec (partition 2 1
                                (take (inc num-threads)
                                      (iterate #(min (+ chunk-size %) size) 0))))
        u (double-array size 1.0)
        tmp (double-array size 0.0)
        v (double-array size 0.0)]
    (dotimes [_ 10]
      (multiply-at-a-v u tmp v num-threads workers ranges)
      (multiply-at-a-v v tmp u num-threads workers ranges))
    (let [vbv (dot-product u v)
          vv (dot-product v v)]
      (Math/sqrt (/ vbv vv)))))

(defn -main [& args]
  (let [n (long (if (empty? args)
                  2500
                  (Long/parseLong ^String (first args))))]
    (println (format "%.9f" (run-game n)))
    (shutdown-agents)))
